version: 0.1
component: build
timeoutInSeconds: 360
runAs: root
shell: bash
failImmediatelyOnError: true

env:
  variables:
    JAVA_HOME : "/usr/lib64/graalvm/graalvm-java17"

  exportedVariables:
    - FRONT_IMAGE_NAME
    - BACK_IMAGE_NAME
    - IMAGE_VERSION
    - DOCKER_REGISTRY
    - BUILDRUN_HASH
    - ORABOT_PDB_NAME
    - OCI_REGION

steps:
# Defining our environment variables
  - type: Command
    name: "Define environment"
    command: |
      export FRONT_IMAGE_NAME=`echo orabot-front`
      echo "FRONT_IMAGE_NAME: " ${FRONT_IMAGE_NAME}

      export BACK_IMAGE_NAME=`echo orabot`
      echo "BACK_IMAGE_NAME: " ${BACK_IMAGE_NAME}

      export IMAGE_VERSION=`echo 0.1`
      echo "IMAGE_VERSION: " ${IMAGE_VERSION}

      export DOCKER_REGISTRY=`echo mx-queretaro-1.ocir.io/axgyv8vo90ix/orabot/ooxbf`
      echo "DOCKER_REGISTRY: " ${DOCKER_REGISTRY}

      export ORABOT_PDB_NAME=`echo orabotooxbf`
      echo "ORABOT_PDB_NAME: " ${ORABOT_PDB_NAME}

      export OCI_REGION=`echo qro.ocir.io`
      echo "OCI_REGION: " ${OCI_REGION}

# Defining our unique "hashed" code from OCI BUILD ID
  - type: Command
    name: "Define unique image tag"
    command: |
      export BUILDRUN_HASH=`echo ${OCI_BUILD_RUN_ID} | rev | cut -c 1-7`
      echo "BUILDRUN_HASH: "$BUILDRUN_HASH

# Installing any dependencies
  - type: Command
    name: "Install yum"
    command: yum install -y curl

  - type: Command
    name: "Install Java"
    command: |
      cd ~
      mkdir InstalledSoftware
      cd InstalledSoftware
      curl -sL https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-17.0.9/graalvm-community-jdk-17.0.9_linux-x64_bin.tar.gz | tar xz
      ~/InstalledSoftware/graalvm-community-openjdk-17.0.9+9.1/bin/gu install native-image

    # export JAVA_HOME=`echo -n InstalledSoftware/jdk-*`
    # export PATH=$JAVA_HOME/bin:$PATH
    # echo Path is
    # $PATH
    # echo JAVA_HOME is
    # $JAVA_HOME

#   - type: Command
#     name: "Install GRAAL VM CE JDK 17 version"
#     command: |
#       yum -y install graalvm-17-native-image

# # Setting our PATH to our new dependencies
#   - type: Command
#     name: "Set the Java path"
#     command: |
#       export PATH=$JAVA_HOME/bin:$PATH

# Checking everything is alright, mainly for debugging
  - type: Command
    name: "Environment check"
    command: |
      ls -la
      java -version
      mvn --version

# Backend container building
  - type: Command
    name: "Clean and Package the Spring Boot Application"
    timeOutInSeconds: 900
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}/backend
      mvn --no-transfer-progress clean package spring-boot::repackage

  - type: Command
    name: "Build backend image"
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}/backend
      docker build -f Dockerfile -t backend-image .

# Frontend container building
  - type: Command
    name: "Build frontend image"
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}/backend
      docker build -f DockerfileFront -t frontend-image .

outputArtifacts:
  - name: orabot
    type: DOCKER_IMAGE
    location: backend-image

  - name: orabot-front
    type: DOCKER_IMAGE
    location: frontend-image

  # - name: orabot-compose
  #   type: BINARY
  #   location: orabot-ar/orabot-compose:0.1